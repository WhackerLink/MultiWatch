<!--
  WhackerLink - Multi Watch

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

  Copyright (C) 2023-2024 Caleb, K4PHP

  Derived from: https://github.com/RiceaRaul/gta-v-map-leaflet
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map - <%= network.name %></title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin="">
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        #map {
            height: calc(100% - 56px);
            width: 100%;
        }

        #button-container {
            position: absolute;
            top: 70px;
            left: 50px;
            z-index: 1000;
        }

        .leaflet-popup-content-wrapper {
            font-size: 14px;
        }

        .emergency-icon {
            background-color: red;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            animation: flash 1s infinite;
            border: 2px solid white;
        }

        @keyframes flash {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.3;
            }
        }
    </style>
</head>
<body>
<%- include("partials/header") %>
<div id="button-container">
    <button id="toggle-lines" class="btn btn-primary">Show Lines</button>
</div>
<div id="map"></div>

<script>
    const center_x = 117.3;
    const center_y = 172.8;
    const scale_x = 0.02072;
    const scale_y = 0.0205;

    CUSTOM_CRS = L.extend({}, L.CRS.Simple, {
        projection: L.Projection.LonLat,
        scale: function(zoom) {
            return Math.pow(2, zoom);
        },
        zoom: function(sc) {
            return Math.log(sc) / 0.6931471805599453;
        },
        distance: function(pos1, pos2) {
            var x_difference = pos2.lng - pos1.lng;
            var y_difference = pos2.lat - pos1.lat;
            return Math.sqrt(x_difference * x_difference + y_difference * y_difference);
        },
        transformation: new L.Transformation(scale_x, center_x, -scale_y, center_y),
        infinite: true
    });

    const SatelliteStyle = L.tileLayer('/mapStyles/styleSatelite/{z}/{x}/{y}.jpg', {
        minZoom: 0,
        maxZoom: 8,
        noWrap: true,
        attribution: 'Online map GTA V',
        id: 'SatelliteStyle'
    });

    const AtlasStyle = L.tileLayer('/mapStyles/styleAtlas/{z}/{x}/{y}.jpg', {
        minZoom: 0,
        maxZoom: 5,
        noWrap: true,
        attribution: 'Online map GTA V',
        id: 'AtlasStyle'
    });

    const GridStyle = L.tileLayer('/mapStyles/styleGrid/{z}/{x}/{y}.png', {
        minZoom: 0,
        maxZoom: 5,
        noWrap: true,
        attribution: 'Online map GTA V',
        id: 'GridStyle'
    });

    var mymap = L.map('map', {
        crs: CUSTOM_CRS,
        minZoom: 1,
        maxZoom: 5,
        Zoom: 5,
        maxNativeZoom: 5,
        preferCanvas: true,
        layers: [SatelliteStyle],
        center: [0, 0],
        zoom: 3,
    });

    const layersControl = L.control.layers({
        "Satellite": SatelliteStyle,
        "Atlas": AtlasStyle,
        "Grid": GridStyle
    }).addTo(mymap);

    const ExampleGroup = L.layerGroup().addTo(mymap);

    function customIcon(icon, isEmergency = false) {
        if (isEmergency) {
            return L.divIcon({
                iconUrl: `/blips/${icon}.png`,
                iconSize: [20, 20],
                iconAnchor: [10, 10],
                popupAnchor: [0, -15],
                className: 'emergency-icon'
            });
        }

        return L.icon({
            iconUrl: `/blips/${icon}.png`,
            iconSize: [20, 20],
            iconAnchor: [10, 10],
            popupAnchor: [0, -15]
        });
    }

    const darkModeToggle = document.getElementById('darkModeToggle');
    const body = document.body;

    const radioMarkers = new Map();
    const emergencyStatus = new Map();
    const siteLines = new Map();

    const socket = io();

    let showLines = false;

    plotSites(JSON.parse('<%- JSON.stringify(sites) %>'));

    socket.on('report', (data) => {
        if (data.Type === 0x12 || data.Type === 0x19) { // 0x12 = emerg req, 0x19 = loc bcast
            console.log('Report data:', data);

            const lat = Number(data.Long);
            const lng = Number(data.Lat);
            const srcId = data.SrcId;
            const site = data.Site;

            if (data.Type === 0x12) {
                emergencyStatus.set(srcId, true);
            } else if (!emergencyStatus.has(srcId)) {
                emergencyStatus.set(srcId, false);
            }

            if (radioMarkers.has(srcId)) {
                const oldMarker = radioMarkers.get(srcId);
                ExampleGroup.removeLayer(oldMarker);
            }

            const isEmergency = emergencyStatus.get(srcId);
            const iconType = isEmergency ? '2' : '1';

            const newMarker = L.marker([lat, lng], {icon: customIcon(iconType, isEmergency)})
                .addTo(ExampleGroup)
                .bindPopup(`
                Src ID: ${srcId}<br>
                ${isEmergency ? '<strong>EMERGENCY ACTIVE</strong>' : ''}
                ${isEmergency ? `<button onclick="clearEmergency(${srcId})">Clear Emergency</button>` : ''}
            `);

            radioMarkers.set(srcId, newMarker);

            if (site) {
                const siteLat = Number(site.Location.Y);
                const siteLng = Number(site.Location.X);

                if (siteLines.has(srcId)) {
                    mymap.removeLayer(siteLines.get(srcId));
                }

                const line = L.polyline([[lat, lng], [siteLat, siteLng]], {
                    color: 'orange',
                    weight: 4,
                    dashArray: '5, 5'
                });

                if (showLines) {
                    line.addTo(mymap);
                }

                siteLines.set(srcId, line);
            }
        }
    });

    socket.on("sts_bcast", (data) => {
        const [siteName, frequency, status] = data.split(",").map(item => item.trim());

        let siteMarker = null;
        radioMarkers.forEach((marker, key) => {
            if (key.includes(siteName)) {
                siteMarker = marker;
            }
        });

        if (siteMarker) {
            ExampleGroup.removeLayer(siteMarker);
            radioMarkers.delete(siteName);
        }

        let iconUrl = '/blips/3.png';

        if (status === "DOWN") {
            iconUrl = '/blips/4.png';
        } else if (status === "FAILSOFT") {
            iconUrl = '/blips/5.png';
        }

        const latLng = siteMarker ? siteMarker.getLatLng() : { lat: 0, lng: 0 };

        const newMarker = L.marker([latLng.lat, latLng.lng], {
            icon: L.icon({
                iconUrl,
                iconSize: [60, 60],
                iconAnchor: [30, 30],
                popupAnchor: [0, -15]
            })
        }).addTo(ExampleGroup);

        newMarker.bindPopup(`
            <strong>${siteName}</strong><br>
            CC: ${frequency} MHz<br>
            Status: ${status}<br>
        `);

        radioMarkers.set(siteName, newMarker);
    });

    function plotSites(sites) {
        console.log(sites);
        if (sites === undefined || sites === null || sites.length === 0) {
            return;
        }

        sites.forEach(site => {
            const lat = Number(site.Location.Y);
            const lng = Number(site.Location.X);

            const siteKey = `site-${site.SiteID}`;

            const marker = L.marker([lat, lng], {
                icon: L.icon({
                    iconUrl: '/blips/3.png',
                    iconSize: [60, 60],
                    iconAnchor: [30, 30],
                    popupAnchor: [0, -15]
                })
            }).addTo(ExampleGroup);

            marker.bindPopup(`
                <strong>${site.Name}</strong><br>
                Control Channel: ${site.ControlChannel}<br>
                Voice Channels: ${site.VoiceChannels.join(', ')}<br>
                Location: (${lat}, ${lng})<br>
                Site ID: ${site.SiteID}<br>
                System ID: ${site.SystemID}<br>
            `);

            radioMarkers.set(siteKey, marker);
        });
    }

    if (localStorage.getItem('darkMode') === 'enabled') {
        body.classList.add('dark-mode');
        darkModeToggle.textContent = 'Light Mode';
    }

    darkModeToggle.addEventListener('click', function() {
        body.classList.toggle('dark-mode');
        if (body.classList.contains('dark-mode')) {
            localStorage.setItem('darkMode', 'enabled');
            darkModeToggle.textContent = 'Light Mode';
        } else {
            localStorage.removeItem('darkMode');
            darkModeToggle.textContent = 'Dark Mode';
        }
    });

    document.getElementById('toggle-lines').addEventListener('click', () => {
        showLines = !showLines;
        document.getElementById('toggle-lines').textContent = showLines ? 'Hide Lines' : 'Show Lines';

        siteLines.forEach(line => {
            if (showLines) {
                line.addTo(mymap);
            } else {
                mymap.removeLayer(line);
            }
        });
    });

    window.clearEmergency = (srcId) => {
        if (emergencyStatus.has(srcId.toString())) {
            emergencyStatus.set(srcId.toString(), false);


            const marker = radioMarkers.get(srcId.toString());
            if (marker) {
                const { lat, lng } = marker.getLatLng();

                ExampleGroup.removeLayer(marker);

                const newMarker = L.marker([lat, lng], { icon: customIcon('1') })
                    .addTo(ExampleGroup)
                    .bindPopup(`
                    Src ID: ${srcId}<br>
                `);

                radioMarkers.set(srcId, newMarker);

                newMarker.openPopup();
            }
        }
    };

</script>
</body>
</html>
