<!--
  Copyright (C) 2023-2025 Caleb H. (K4PHP) caleb.k4php@gmail.com

  This file is part of the WhackerLink MultiWatch project.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.

  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>MultiWatch</title>

    <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-…"
            crossorigin="anonymous"
    />

    <style>
        body.dark-mode {
            background-color: #121212;
            color: #eee;
        }
        body.dark-mode .navbar,
        body.dark-mode #sidebar {
            background-color: #1f1f1f !important;
        }
        body.dark-mode .nav-pills .nav-link {
            color: #ccc;
        }
        body.dark-mode .nav-pills .nav-link.active {
            background-color: #333 !important;
        }
        body.dark-mode .card {
            background-color: #1f1f1f;
            color: #eee;
            border-color: #333;
        }

        #sidebar {
            height: calc(100vh - 56px);
            overflow-y: auto;
        }

        .site-card {
            transition: transform .2s;
        }
        .site-card:hover {
            transform: translateY(-4px);
        }

        .hidden { display: none !important; }
    </style>
</head>
<body>
<%- include("partials/header") %>

<div class="container-fluid">
    <div class="row">
        <aside class="col-12 col-md-2 p-0 bg-light border-end" id="sidebar">
            <ul class="nav nav-pills flex-column my-3" id="networkList"></ul>
        </aside>

        <main class="col-12 col-md-10 py-3" id="contentArea">
            <div class="text-center text-muted">
                <i class="spinner-border spinner-border-sm me-2"></i>Waiting for data…
            </div>
        </main>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    (function() {
        const socket      = io();
        const listEl      = document.getElementById('networkList');
        const contentEl   = document.getElementById('contentArea');
        const darkToggle  = document.getElementById('darkModeToggle');
        const toggleLabel = document.getElementById('toggleLabel');
        let networks      = [];
        let activeIndex   = 0;

        if (localStorage.getItem('darkMode') === 'enabled') {
            document.body.classList.add('dark-mode');
            toggleLabel.textContent = 'Light Mode';
        }
        darkToggle.addEventListener('click', () => {
            const on = document.body.classList.toggle('dark-mode');
            toggleLabel.textContent = on ? 'Light Mode' : 'Dark Mode';
            localStorage.setItem('darkMode', on ? 'enabled' : 'disabled');
        });

        socket.on('networkUpdate', data => {
            networks = data;
            renderSidebar();
            renderContent();
        });

        function renderSidebar() {
            listEl.innerHTML = '';
            networks.forEach((net, idx) => {
                const a = document.createElement('a');
                a.href = '#';
                a.className = 'nav-link' + (idx === activeIndex ? ' active' : '');
                a.textContent = net.name;
                a.onclick = e => {
                    e.preventDefault();
                    activeIndex = idx;
                    renderSidebar();
                    renderContent();
                };
                listEl.appendChild(a);
            });
        }

        function renderContent() {
            const net = networks[activeIndex];
            if (!net || !net.data?.sites) {
                contentEl.innerHTML = `
          <div class="alert alert-warning text-center">
            No data for <strong>${net?.name || '…'}</strong>
          </div>`;
                return;
            }

            contentEl.innerHTML = net.data.sites.map(site => `
        <div class="card site-card mb-3">
          <div class="card-header d-flex justify-content-between align-items-center">
            <span>${site.name || 'Unnamed Site'}</span>
            <span class="badge ${site.status === 'online' ? 'bg-success' : 'bg-secondary'}">
              ${site.status === 'online' ? 'Online' : 'Offline'}
            </span>
          </div>
          <div class="card-body">
            <p><strong>Control:</strong> ${site.controlChannel || '—'}</p>
            <div class="row">
              ${renderVoiceChannels(net.data.activeVoiceChannels, site.siteID)}
            </div>
          </div>
        </div>
      `).join('');
        }

        function renderVoiceChannels(channels = [], siteID) {
            const list = channels.filter(vc => vc.site.siteID === siteID);
            if (!list.length) {
                return `<div class="col-12"><em>No active channels</em></div>`;
            }
            return list.map(vc => `
        <div class="col-6 col-md-4 mb-2">
          <div class="card p-2">
            <div><strong>Freq:</strong> ${vc.frequency || '—'} MHz</div>
            <div><strong>Src:</strong> ${vc.srcId || '—'}</div>
            <div><strong>Dst:</strong> ${vc.dstId || '—'}</div>
          </div>
        </div>
      `).join('');
        }
    })();
</script>
</body>
</html>
