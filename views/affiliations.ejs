<!--
  Copyright (C) 2023-2025 Caleb H. (K4PHP) caleb.k4php@gmail.com

  This file is part of the WhackerLink MultiWatch project.

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <https://www.gnu.org/licenses/>.

  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Affiliations</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js" crossorigin="anonymous"></script>

    <style>
        body.dark-mode {
            background-color: #121212;
            color: #eee;
        }
        body.dark-mode .navbar,
        body.dark-mode #sidebar {
            background-color: #1f1f1f !important;
        }
        body.dark-mode .nav-pills .nav-link {
            color: #ccc;
        }
        body.dark-mode .nav-pills .nav-link.active {
            background-color: #333 !important;
        }
        body.dark-mode .card {
            background-color: #1f1f1f;
            color: #eee;
            border-color: #333;
        }

        #sidebar {
            height: calc(100vh - 56px);
            overflow-y: auto;
        }

        .site-card {
            transition: transform .2s;
        }
        .site-card:hover {
            transform: translateY(-4px);
        }

        .hidden { display: none !important; }
    </style>
</head>
<body>
<%- include("partials/header") %>
<div class="container mt-4">
    <h1>Affiliations</h1>
    <div id="affiliations-container"></div>
</div>

<script>
    const loggedIn = <%= loggedIn ? 'true' : 'false' %>;

    document.addEventListener('DOMContentLoaded', function() {
        const socket = io();
        const darkModeToggle = document.getElementById('darkModeToggle');
        const toggleLabel = document.getElementById('toggleLabel');
        const body = document.body;

        if (localStorage.getItem('darkMode') === 'enabled') {
            body.classList.add('dark-mode');
            if (toggleLabel) toggleLabel.textContent = 'Light Mode';
        }

        if (darkModeToggle) {
            darkModeToggle.addEventListener('click', function() {
                body.classList.toggle('dark-mode');
                if (body.classList.contains('dark-mode')) {
                    localStorage.setItem('darkMode', 'enabled');
                    if (toggleLabel) toggleLabel.textContent = 'Light Mode';
                } else {
                    localStorage.removeItem('darkMode');
                    if (toggleLabel) toggleLabel.textContent = 'Dark Mode';
                }

                socket.emit('requestAffiliationsUpdate');
            });
        }

        socket.on('affiliationsUpdate', function(networks) {
            renderAffiliations(networks);
        });

        function renderAffiliations(networks) {
            const container = document.getElementById('affiliations-container');
            container.innerHTML = '';

            networks.forEach(network => {
                const networkBox = document.createElement('div');
                networkBox.className = 'network-box mb-4';
                networkBox.innerHTML = `
                    <h2>${network.name}</h2>
                    <table class="table table-bordered ${body.classList.contains('dark-mode') ? 'table-dark' : ''}">
                            <thead>
                                <tr>
                                    <th>Source ID</th>
                                    <th>Destination ID</th>
                                    <th>Site</th>
                                    <% if (loggedIn) { %>
                                        <th>Actions</th>
                                    <% } %>
                                </tr>
                            </thead>
                        <tbody class="affiliations-tbody">
                        </tbody>
                    </table>
                `;

                const tableBody = networkBox.querySelector('.affiliations-tbody');

                if (network.status === 'connected') {
                    if (network.data.length > 0) {
                        network.data.forEach(affiliation => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${affiliation.srcId}</td>
                                <td>${affiliation.dstId}</td>
                                <td>${affiliation.site && affiliation.site.name ? affiliation.site.name : 'UNKNOWN'}</td>
                                ${loggedIn ? `
                                    <td>
                                        <button class="btn btn-sm btn-danger me-1 inhibit-btn">Inhibit</button>
                                        <button class="btn btn-sm btn-warning me-1 page-btn">Page</button>
                                        <button class="btn btn-sm btn-success uninhibit-btn">Uninhibit</button>
                                    </td>
                                ` : ''}
                            `;
                            tableBody.appendChild(row);

                            if (loggedIn) {
                                const inhibitBtn = row.querySelector('.inhibit-btn');
                                const uninhibitBtn = row.querySelector('.uninhibit-btn');
                                const pageBtn = row.querySelector('.page-btn');

                                const dstId = affiliation.dstId;
                                const networkName = network.name;

                                inhibitBtn.addEventListener('click', () => {
                                    socket.emit('inhibit', { dstId, network: networkName });
                                });
                                uninhibitBtn.addEventListener('click', () => {
                                    socket.emit('uninhibit', { dstId, network: networkName });
                                });
                                pageBtn.addEventListener('click', () => {
                                    socket.emit('page', { dstId, network: networkName });
                                });
                            }
                        });
                    } else {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td colspan="3">No affiliations</td>
                        `;
                        tableBody.appendChild(row);
                    }
                } else {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td colspan="3">Connection Failed</td>
                    `;
                    tableBody.appendChild(row);
                }

                container.appendChild(networkBox);
            });
        }
    });
</script>
</body>
</html>