<!--
  WhackerLink - Multi Watch

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.

  Copyright (C) 2023-2024 Caleb, K4PHP
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reports</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/styles.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js" crossorigin="anonymous"></script>
</head>
<body>
<%- include("partials/header") %>

<div class="container mt-4">
    <h1>Reports</h1>
    <table class="table table-bordered" id="reports-table">
        <thead>
        <tr>
            <th>Type</th>
            <th>Source ID</th>
            <th>Destination ID</th>
            <th>Response Type</th>
            <th>Time</th>
        </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const socket = io();
        const darkModeToggle = document.getElementById('darkModeToggle');
        const body = document.body;

        const PacketTypes = Object.freeze({
            0x0: "UNKOWN",
            0x1: "AUDIO_DATA",
            0x2: "GRP_AFF_REQ",
            0x3: "GRP_AFF_RSP",
            0x4: "AFF_UPDATE",
            0x5: "GRP_VCH_REQ",
            0x6: "GRP_VCH_RLS",
            0x7: "GRP_VCH_RSP",
            0x8: "U_REG_REQ",
            0x9: "U_REG_RSP",
            0x10: "U_DE_REG_REQ",
            0x11: "U_DE_REG_RSP",
            0x12: "EMRG_ALRM_REQ",
            0x13: "EMRG_ALRM_RSP",
            0x14: "CALL_ALRT",
            0x15: "CALL_ALRT_REQ",
            0x16: "AUTH_DEMAND",
            0x17: "AUTH_RESPONSE",
            0x18: "REL_DEMND",
            0x19: "LOC_BCST"
        });

        const ResponseTypes = Object.freeze({
            0: "Grant",
            1: "Reject",
            2: "Deny",
            3: "Refuse",
            4: "Fail",
            0xFF: "N/A"
        });

        if (localStorage.getItem('darkMode') === 'enabled') {
            body.classList.add('dark-mode');
            darkModeToggle.textContent = 'Light Mode';
        }

        darkModeToggle.addEventListener('click', function() {
            body.classList.toggle('dark-mode');
            if (body.classList.contains('dark-mode')) {
                localStorage.setItem('darkMode', 'enabled');
                darkModeToggle.textContent = 'Light Mode';
            } else {
                localStorage.removeItem('darkMode');
                darkModeToggle.textContent = 'Dark Mode';
            }
        });

        const reports = JSON.parse('<%- JSON.stringify(reports) %>'); // man that is ugly

        reports.forEach(report => {
            renderReport(report);
        });

        socket.on('report', function(report) {
            renderReport(report);
        });


        function renderReport(report) {
            const tableBody = document.getElementById('reports-table').querySelector('tbody');
            const row = document.createElement('tr');
            const responseType = report.ResponseType;

            if (PacketTypes[report.Type] === undefined || PacketTypes[report.Type] === null) {
                return;
            }

            if (report.Type === 0x19 && "<%=hideLocBcast%>") { // 0x19 = loc bcast
                return;
            }

            switch (responseType) {
                case 0:
                    row.classList.add("bg-success");
                    break;
                case 1:
                    row.classList.add("bg-danger");
                    break;
                case 2:
                    row.classList.add("bg-warning");
                    break;
                case 3:
                case 4:
                    row.classList.add("bg-danger");
                    break;
                case 0xFF:
                    row.classList.add("bg-primary");
            }

            row.innerHTML = `
                <td>${PacketTypes[report.Type]}</td>
                <td>${report.SrcId || 'N/A'}</td>
                <td>${report.DstId || 'N/A'}</td>
                <td>${ResponseTypes[parseInt(report.ResponseType)]}</td>
                <td>${report.Timestamp}</td>
            `;
            tableBody.insertBefore(row, tableBody.firstChild);
        }
    });
</script>
</body>
</html>